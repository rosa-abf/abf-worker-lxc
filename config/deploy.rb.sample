# -*- encoding : utf-8 -*-
require 'cape'
require 'capistrano_colors'

#set :default_environment, 'staging'

#set :rake, "#{rake} --trace"
set :rvm_ruby_string, 'ruby-2.1.0@abf-worker'
require 'rvm/capistrano'
require 'bundler/capistrano'
#require 'airbrake/capistrano'

require 'capistrano/ext/multistage'
set :stages, %w(production) # auto readed
set :default_stage, "production"

# main details
ssh_options[:forward_agent] = true
default_run_options[:pty] = true

set :env, ENV['ENV'] || 'production'

set :application, "abf-worker"
set(:deploy_to) { "/home/rosa/#{application}" }
set :user, "rosa"
set :use_sudo, false
set :keep_releases, 3

set :scm, :git
set :repository,  "git@github.com:uname/repository.git"
set :deploy_via,  :remote_cache

set :workers_count, 2


set :rvm_install_ruby_threads, 1


before "deploy:setup",        "deploy:init"

after "deploy:update",        "deploy:init_keys"
after "deploy:update",        "deploy:symlink_all"
after "deploy:update",        "rake_tasks:abf_worker:init_boxes"

before "deploy:stop",         "god:terminate_if_running"

after "deploy:stop",          "rake_tasks:abf_worker:stop"
after "deploy:stop",          "rake_tasks:abf_worker:clean_up"
after "deploy:update",        "rake_tasks:abf_worker:clean_up"
after "deploy:restart",       "deploy:cleanup"


namespace :god do
  def god_is_running
    !capture("#{god_command} status >/dev/null 2>/dev/null || echo 'not running'").start_with?('not running')
  end

  desc "Stop god"
  task :terminate_if_running do
    run "#{god_command} terminate" if god_is_running
  end
end

namespace :deploy do

  task :init do
    run "mkdir -p #{fetch :shared_path}/{config,log,pids}"
    # procmail
    run "sudo apt-get install -y lxc git tar redir bsdtar vagrant"
    
    run "sudo rm -rf /mnt/store/{lxc-containers,tmp,tmp-vagrant-boxes,vagrant-boxes}"
    run "sudo mkdir -p /mnt/store/{lxc-containers,tmp,tmp-vagrant-boxes,vagrant-boxes}"
    run "sudo chown -R rosa:rosa /mnt/store/{lxc-containers,tmp,tmp-vagrant-boxes,vagrant-boxes}"

    run "ln -s /mnt/store/vagrant-boxes ~/boxes"
    run "rm -rf .vagrant.d && mkdir .vagrant.d"
    run "ln -s /mnt/store/tmp-vagrant-boxes ~/.vagrant.d/boxes"

    run 'sudo rm -rf /var/lib/lxc'
    run "sudo ln -s /mnt/store/lxc-containers /var/lib/lxc"
  end

  task :init_keys do
    run "cd #{fetch :current_path} && chmod 600 keys/vagrant"
  end

  task :symlink_all do
    run "mkdir -p #{fetch :shared_path}/config"

    # Setup DB, application, newrelic
    %w(application vm).each do |config|
      run "cp -n #{fetch :release_path}/config/#{config}.yml.sample #{fetch :shared_path}/config/#{config}.yml"
      run "ln -nfs #{fetch :shared_path}/config/#{config}.yml #{fetch :release_path}/config/#{config}.yml"
    end

    run "ln -s #{fetch :shared_path}/pids #{fetch :release_path}/pids"
    if fetch(:update_vm_yml)
      run "cp -f #{fetch :release_path}/config/vm.yml.sample #{fetch :shared_path}/config/vm.yml"
    end

  end

  task :rpm, :roles => [:rpm] do
    queue = 'rpm_worker'
    run_worker_with_params({
      :VAGRANT_DEFAULT_PROVIDER => 'lxc',
      :INTERVAL => 5,
      :COUNT    => 1,
      :QUEUE    => "#{queue}_default,#{queue}",
      :GROUP    => 'rpm'
    })
  end

end

namespace :rake_tasks do
  Cape do
    %w(clean_up init_boxes stop).each do |task|
      mirror_rake_tasks "abf_worker:#{task}" do |recipes|
        recipes.env['ENV'] = fetch(:env)
      end
    end
  end
end

def run_worker_with_params(params)
  config_file = "#{fetch :current_path}/config/resque.god"
  run "#{god_command} -c #{config_file}", :env => worker_params(params)
end

def worker_params(params)
  {
    :RESQUE_TERM_TIMEOUT  => 600,
    :TERM_CHILD           => 1,
    :ENV                  => fetch(:env),
    :CURRENT_PATH         => fetch(:current_path),
    :BACKGROUND           => 'yes'
  }.merge(params)
end

def god_command
  "cd #{fetch :current_path} && rvm #{fetch :rvm_ruby_string} exec bundle exec god"
end